/*
 * Copyright (c) 2023 sporkus
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define COMBO_FAST 25
#define COMBO_SLOW 75

&lt {
    global-quick-tap-ms = <120>;
    quick_tap_ms = <200>;
    flavor = "balanced";
};

/ {
    //    conditional_layers {
    //        compatible = "zmk,conditional-layers";
    //
    //        // MAC + NAV = MAC_NAV
    //        tri_layer {
    //            if-layers = <1 3>;
    //            then-layer = <4>;
    //        };
    //    };

    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <15 14>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <19 20>;
        };

        bspc_combo {
            bindings = <&bspc_del>;
            key-positions = <20 21>;
            timeout-ms = <30>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
        };

        combo_copypaste {
            bindings = <&lp LS(INS) LC(INS)>;
            key-positions = <28 27>;
            timeout-ms = <35>;
            layers = <0>;
        };

        //        combo_copypaste_mac {
        //            bindings = <&lp LG(V) LG(C)>;
        //            key-positions = <27 28>;
        //            timeout-ms = <COMBO_FAST>;
        //            layers = <1>;
        //        };

        lbkt_combo {
            bindings = <&kp LBKT>;
            key-positions = <2 14>;
        };

        lbrc_combo {
            bindings = <&kp LBRC>;
            key-positions = <3 15>;
        };

        lpar_combo {
            bindings = <&kp LPAR>;
            key-positions = <4 16>;
        };

        lt_combo {
            bindings = <&kp LT>;
            key-positions = <17 5>;
        };

        gt_combo {
            bindings = <&kp GT>;
            key-positions = <18 6>;
        };

        rpar_combo {
            bindings = <&kp RPAR>;
            key-positions = <7 19>;
        };

        rbrc_combo {
            bindings = <&kp RBRC>;
            key-positions = <20 8>;
        };

        rbkt_combo {
            bindings = <&kp RBKT>;
            key-positions = <9 21>;
        };

        bootloader_combo {
            bindings = <&bootloader>;
            key-positions = <0 11 1 10>;
        };
    };

    behaviors {
        lp: lp {
            compatible = "zmk,behavior-hold-tap";
            label = "(hold, tap)";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
        };
        skp: skp {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky key";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <300>;
            ignore-modifiers;
        };
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "left homerow mods";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            global-quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <18 29 19 6 6 7 8 9 10 11 18 19 20 21 22 29 30 31 32 33 38 40 41 39>;
            hold-trigger-on-release;
        };
        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "right homerow mods";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            global-quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 23 24 25 26 27 28 34 35 36 37>;
            hold-trigger-on-release;
        };
        nav_t: nav_t {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_T";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <20 18 19 21 7 8 30 31 9 23>;
        };
        lt_hold: lt_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
        };
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            bindings =
                <&kp BSPC>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_hold_l: mt_hold_l {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_L";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 29 30 31 32 33 39 40 41>;
            hold-trigger-on-release;
        };
        mt_hold_r: mt_hold_r {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_R";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 23 24 25 26 27 34 35 36 37 28>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = " Base";
            bindings = <
       &kp TAB                &kp Q              &kp W              &kp E             &kp R  &kp T  &kp Y                   &kp U               &kp I          &kp O         &kp P                    &bspc_del
&lt_hold 2 ESC  &hrm_l LEFT_SHIFT A  &hrm_l LEFT_ALT S  &hrm_l LEFT_GUI D    &hrm_l LCTRL F  &kp G  &kp H  &hrm_r RIGHT_CONTROL J  &hrm_r RIGHT_GUI K  &hrm_r RALT L                 &mt_hold_r RIGHT_SHIFT SQT
    &skp LSHFT                &kp Z              &kp X              &kp C             &kp V  &kp B  &kp N                   &kp M           &kp COMMA                      &kp DOT  &mt_hold_r RIGHT_SHIFT FSLH
     &kp LCTRL             &kp LALT           &kp LGUI                     &lt_hold 1 SPACE                        &nav_t 2 SPACE                      &kp RIGHT_GUI  &kp LEFT_ALT                    &kp LCTRL
            >;
        };

        num {
            bindings = <
&trans  &kp TILDE      &kp LBKT      &kp RBKT       &kp SEMI   &kp LS(PLUS)  &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &kp GRAVE  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(COLON)  &kp LS(UNDER)  &kp MINUS  &kp N4  &kp N5  &kp N6          &trans
&trans     &trans        &trans        &trans         &trans         &trans   &kp BSLH  &kp N1  &kp N2          &kp N3  &trans
&trans     &trans        &trans                       &trans                            &kp N0          &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
    &trans  &kp LG(GRAVE)  &trans  &trans  &trans  &trans    &trans        &kp TAB   &kp BSPC    &kp DEL  &trans  &trans
    &trans         &trans  &trans  &trans  &trans  &trans  &kp LEFT       &kp DOWN     &kp UP  &kp RIGHT          &trans
&caps_word         &trans  &trans  &trans  &trans  &trans    &trans  &kp PAGE_DOWN  &kp PG_UP             &trans  &trans
    &trans         &trans  &trans          &trans                           &trans                &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans
&trans  &trans  &trans          &trans                  &trans          &trans  &trans  &trans
            >;
        };
    };
};
