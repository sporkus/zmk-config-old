/*
 * Copyright (c) 2023 sporkus
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define COMBO_FAST 25
#define COMBO_SLOW 75
#define BASE 0
#define NUM 1
#define NAV 2
#define ADJ 3

&lt {
    quick_tap_ms = <250>;
    flavor = "balanced";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;

            tapping-term-ms = <180>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 18 30 31 32 33 34 35 23 19 20 21 7 8 9 10 22 11>;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;

            tapping-term-ms = <180>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 12 24 25 26 27 28 29 13 14 15 16 17 5 4 1 2 3>;
        };
        sft_t: sft_t {
            compatible = "zmk,behavior-hold-tap";
            label = "SFT_T";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-on-release;
            flavor = "hold-preferred";
        };
        skp: skp {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky key press";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <300>;
            ignore-modifiers;
        };
        smo: smo {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky layer";
            bindings = <&mo>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <300>;
            ignore-modifiers;
        };
        lp: lp {
            compatible = "zmk,behavior-hold-tap";
            label = "(hold, tap)";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
        };
        nav_t: nav_t {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_T";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <250>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            timeout-ms = <COMBO_FAST>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
            timeout-ms = <COMBO_FAST>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            timeout-ms = <COMBO_FAST>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <17 18>;
            timeout-ms = <COMBO_FAST>;
        };

        combo_copypaste {
            bindings = <&lp LS(INS) LC(INS)>;
            key-positions = <22 12>;
            timeout-ms = <COMBO_FAST>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <13 3>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <6 16>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_lt {
            bindings = <&kp LT>;
            key-positions = <4 14>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_gt {
            bindings = <&kp GT>;
            key-positions = <5 15>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <12 2>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_rbrc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <17 7>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <1 11>;
            timeout-ms = <COMBO_SLOW>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <8 18>;
            timeout-ms = <COMBO_SLOW>;
        };

        // left indicies
        combo_lhelp {
            bindings = <&none>;
            key-positions = <0 12 24 13 14 4 1 2 3 10 11 20 21 23 22>;
            timeout-ms = <0>;
        };

        // right indicies
        combo_rhelp {
            bindings = <&none>;
            key-positions = <6 18 34 35 19 7 8 9 5 25 15 16 26 17 27 28 29>;
            timeout-ms = <0>;
        };

        combo_bootloader {
            bindings = <&bootloader>;
            key-positions = <0 1 8 9>;
        };
    };

    chosen {
        zmk,matrix_transform = &transform_with_encoder;
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
       &kp Q       &kp W        &kp E           &kp R  &kp T               &kp Y        &kp U            &kp I       &kp O                         &kp P
&hm LSHIFT A  &hm LALT S  &hm LCTRL D  &hm LEFT_GUI F  &kp G               &kp H  &hm LCTRL J  &hm RIGHT_GUI K  &hm LALT L  &hm RIGHT_SHIFT SINGLE_QUOTE
       &kp Z       &kp X        &kp C           &kp V  &kp B               &kp N        &kp M        &kp COMMA     &kp DOT                      &kp FSLH
                               &trans                  &mo 1      &nav_t 2 SPACE                        &trans
  &kp C_MUTE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        NUM {
            bindings = <
&trans  &trans  &trans   &kp SEMI  &trans      &kp EQUAL  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &kp COLON  &trans      &kp MINUS  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans     &trans  &trans       &kp BSLH  &kp N1  &kp N2  &kp N3  &trans
                &trans             &trans         &trans          &trans
&trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans        &trans    &trans  &kp BSPC     &trans  &trans
&trans  &trans  &trans  &trans  &trans      &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans        &trans    &trans    &trans     &trans  &trans
                &trans          &trans        &trans              &trans
&trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        ADJ {
            bindings = <
&trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans
                &trans          &trans      &trans          &trans
&trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
