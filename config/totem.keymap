//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE          0
#define MAC           1
#define NUM           2
#define NUM_L         3
#define NAV           4
#define SHORTCUT      5
#define SHORTCUT_MAC  6
#define ADJ           7
#define COMBO_FAST 35
#define STICKY_RELEASE_MS 330

&mt {
    quick-tap-ms = <250>;
    global-quick-tap-ms = <250>;
    flavor = "balanced";
    tapping-term-ms = <250>;
    hold-trigger-on-release;
};

&lt {
    quick-tap-ms = <220>;
    global-quick-tap-ms = <50>;
    flavor = "balanced";
    tapping-term-ms = <220>;
};

&sl {
    quick-release;
    release-after-ms = <STICKY_RELEASE_MS>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <SHORTCUT MAC>;
            then-layer = <SHORTCUT_MAC>;
        };
    };
};

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "(hold, tap)";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            global-quick-tap-ms = <80>;
        };
        emt: emt {
            compatible = "zmk,behavior-hold-tap";
            label = "eager mod tap";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            global-quick-tap-ms = <250>;
            hold-while-undecided;
            hold-trigger-on-release;
        };
        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "quick release";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            ignore-modifiers;
            quick-release;
        };
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <NUM_L>;// insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA>;// adjust as desired
            ignore-numbers;// numbers don't deactivate the layer
        };
        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_MORPH";
            bindings =
                <&kp BSPC>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        rbrc_morph: rbrc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRC_MORPH";
            bindings =
                <&kp RBRC>,
                <&kp LBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        tap2_shift: tap2_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP2_SHIFT";
            #binding-cells = <0>;
            bindings =
                <&skq LEFT_SHIFT>,
                <&caps_word>;
        };
        tap2_num: tap2_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP2_NUM";
            #binding-cells = <0>;
            bindings =
                <&sl 2>,
                <&num_word>;
        };
        tap2_sleep_win: tap2_sleep_win {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP2_SLEEP_WIN";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&win_sleep>;
        };
        tap2_sleep_mac: tap2_sleep_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP2_SLEEP_MAC";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&kp LA(LG(S))>;
        };
        lth: lth {
            compatible = "zmk,behavior-hold-tap";
            label = "lt-hold-pref";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        sft_t: sft_t {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap-hold-pref";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            hold-trigger-on-release;
        };
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings =
                <&kp COMMA>,
                <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings =
                <&kp DOT>,
                <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_morph_t: comma_morph_t {
            compatible = "zmk,behavior-hold-tap";
            label = "COMMA_MORPH_T";
            bindings =
                <&kp>,
                <&comma_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
        dot_morph_t: dot_morph_t {
            compatible = "zmk,behavior-hold-tap";
            label = "DOT_MORPH_T";
            bindings =
                <&kp>,
                <&dot_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            global-quick-tap-ms = <80>;
            layers = <BASE MAC>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            global-quick-tap-ms = <80>;
            layers = <BASE MAC NUM>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <1 11>;
            global-quick-tap-ms = <80>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <2 12>;
            global-quick-tap-ms = <80>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <3 13>;
            global-quick-tap-ms = <80>;
        };

        combo_lt {
            bindings = <&kp LT>;
            key-positions = <4 14>;
            global-quick-tap-ms = <80>;
        };

        combo_gt {
            bindings = <&kp GT>;
            key-positions = <5 15>;
            global-quick-tap-ms = <80>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <6 16>;
            global-quick-tap-ms = <80>;
        };

        combo_rbrc {
            bindings = <&rbrc_morph>;
            key-positions = <7 17>;
            global-quick-tap-ms = <80>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <8 18>;
            global-quick-tap-ms = <80>;
        };

        combo_esc0 {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            global-quick-tap-ms = <COMBO_FAST>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <18 17>;
            global-quick-tap-ms = <COMBO_FAST>;
        };
    };

    macros {
        win_sleep: win_sleep {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };
        mac_finder: mac_finder {
            compatible = "zmk,behavior-macro";
            label = "mac_finder";
            #binding-cells = <0>;
            bindings =
                <&kp LG(SPACE)>,
                <&macro_tap_time 1>,
                <&macro_wait_time 1>,
                <&kp F &kp I &kp N &kp D &kp E &kp R &kp DOT &kp A &kp P &kp P &kp RET>;
        };
        space_shift: space_shift {
            compatible = "zmk,behavior-macro";
            label = "space_shift";
            #binding-cells = <0>;
            bindings = <&kp SPACE &skq LEFT_SHIFT>;
        };
        bt0_mac: bt0_mac {
            compatible = "zmk,behavior-macro";
            label = "bt0_mac";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &to 1>;
        };
        bt1_win: bt1_win {
            compatible = "zmk,behavior-macro";
            label = "bt1_win";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &to 0>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                     &kp Q            &kp W           &kp E               &kp R        &kp T        &kp Y               &kp U                      &kp I                    &kp O                    &kp P
                     &kp A            &kp S           &kp D               &kp F        &kp G        &kp H               &kp J                      &kp K                    &kp L              &ht DQT SQT
&mo 4  &sft_t LEFT_SHIFT Z  &emt LEFT_ALT X  &mt LEFT_GUI C  &mt LEFT_CONTROL V        &kp B        &kp N  &mt LEFT_CONTROL M  &comma_morph_t LEFT_GUI 0  &dot_morph_t LEFT_ALT 0  &sft_t LEFT_SHIFT SLASH  &mo 4
                                                      &none           &tap2_num  &tap2_shift  &lt 3 SPACE         &lt 3 SPACE                      &none
            >;
        };

        MAC {
            bindings = <
        &trans  &trans           &trans  &trans  &trans  &trans  &trans               &trans  &trans  &trans
        &trans  &trans           &trans  &trans  &trans  &trans  &trans               &trans  &trans  &trans
&trans  &trans  &trans  &emt LEFT_GUI C  &trans  &trans  &trans  &trans  &emt LEFT_GUI COMMA  &trans  &trans  &trans
                                 &trans  &trans  &trans  &trans  &trans               &trans
            >;
        };

        num {
            label = "NUM";
            bindings = <
                &ht TILDE GRAVE     &none          &none         &none  &ht TILDE GRAVE  &ht LS(EQUAL) EQUAL    &ht AMPS N7    &ht ASTRK N8   &ht LPAR N9  &kp NUMBER_0
                     &kp LSHIFT  &kp LALT       &kp LGUI     &kp LCTRL            &none  &ht LS(MINUS) MINUS  &ht DOLLAR N4  &ht PERCENT N5  &ht CARET N6   &ht DQT SQT
&kp LEFT_SHIFT            &none     &none          &none         &none            &none       &ht PIPE SLASH    &ht EXCL N1       &ht AT N2   &ht HASH N3     &kp SLASH  &trans
                                           &ht COMMA DOT  &kp NUMBER_0  &skq LEFT_SHIFT            &kp SPACE   &kp NUMBER_0   &ht COMMA DOT
            >;
        };

        nav {
            label = "NAV";
            bindings = <
        &trans                &trans                &trans                &trans  &kp LG(GRAVE)   &kp HOME  &kp PG_DN  &kp PG_UP    &kp END     &trans
         &none                &trans                &trans                &trans    &kp LG(TAB)   &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &kp LSHFT
&trans  &trans  &kp LC(LG(NUMBER_3))  &kp LG(LC(NUMBER_2))  &kp LC(LG(NUMBER_1))    &kp LA(TAB)     &trans     &trans     &trans     &trans     &trans  &trans
                                                     &none                 &none         &trans  &kp SPACE     &trans     &trans
            >;
        };

        shortcut {
            label = "SHORTCUT";
            bindings = <
       &kp LA(F4)            &kp LC(W)    &kp LG(E)            &kp LC(R)  &kp LC(T)      &trans     &kp PG_DN     &kp PG_UP   &kp LC(O)  &ht LS(LC(P)) LC(P)
        &kp LC(A)  &ht LC(LS(S)) LC(S)       &trans  &ht LC(LS(F)) LC(F)      &none    &kp LEFT      &kp DOWN        &kp UP   &kp RIGHT            &kp LSHFT
&none   &kp LC(Z)            &kp LC(X)  &kp LC(INS)          &kp LS(INS)      &none  &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT      &tap2_sleep_win  &none
                                              &mo 6               &trans     &trans      &trans        &trans         &mo 6
            >;
        };

        shortcut_mac {
            label = "SHORTCUT_MAC";
            bindings = <
        &kp LG(Q)            &kp LG(W)  &mac_finder            &kp LG(R)      &kp LG(T)         &trans  &trans  &trans  &trans  &ht LG(LS(P)) LG(P)
        &kp LG(A)  &ht LG(LS(S)) LG(S)       &trans  &ht LG(LS(F)) LG(F)          &none         &trans  &trans  &trans  &trans               &trans
&trans  &kp LG(Z)            &kp LG(X)    &kp LG(C)            &kp LG(V)  &kp LS(LG(Z))         &trans  &trans  &trans  &trans      &tap2_sleep_mac  &trans
                                              &mo 6               &trans         &trans  &kp LG(SPACE)  &trans   &mo 6
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
         &none  &bt BT_CLR  &out OUT_TOG    &trans  &trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12
         &none  &bt BT_NXT        &trans    &trans  &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &bt BT_PRV      &bt1_win  &bt0_mac  &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
