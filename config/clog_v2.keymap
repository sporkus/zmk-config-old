#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../keypos_def/keypos_clog_v2.h"

// SETTINGS 
#define QUICK_TAP_MS 300 
#define STICKY_TIME_MS 1000 

// LAYERS
#define BASE 0
#define SYM 1
#define _MAC 2
#define _WIN 3
#define NAV 4
#define MAC_SHORTCUT 5
#define WIN_SHORTCUT 6
#define FN 7

&lt {
	flavor = "tap-preferred";
	quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    // -------- BEHAVIORS ---------
    #define ZMK_BEHAVIOR(name, cell) \
        name: name {\
            label = #name;\
            #binding-cells = <cell>;

    #define SHIFT_MORPH(name, bind1, bind2) \
        ZMK_BEHAVIOR(name, 0)\
            compatible = "zmk,behavior-mod-morph";\
            bindings = <&kp bind1>, <&kp bind2>;\
            mods = <(MOD_LSFT|MOD_RSFT)>;\
        }

    #define STICKY(name, bind) \
        ZMK_BEHAVIOR(skq, 1)\
            compatible = "zmk,behavior-sticky-key";\
            bindings = <bind>;\
            release-after-ms = <STICKY_TIME_MS>;\
            quick-release;\
        }

    behaviors {
        SHIFT_MORPH(bspc_del,   BSPC,               DEL);
        SHIFT_MORPH(rpar_lpar,  RIGHT_PARENTHESIS,  LEFT_PARENTHESIS);
        SHIFT_MORPH(rbrc_lbrc,  RIGHT_BRACE,        LEFT_BRACE);
        SHIFT_MORPH(dot_coln,   DOT,                COLON);
        SHIFT_MORPH(comm_scln,  COMMA,              SEMICOLON);

        STICKY(skq, &kp);

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row mods";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
        };

        lht: lht {
            compatible = "zmk,behavior-hold-tap";
            label = "left hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RH KEYS_THUMB>;
            #binding-cells = <2>;
        };

        rht: rht {
            compatible = "zmk,behavior-hold-tap";
            label = "right hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LH KEYS_THUMB>;
            #binding-cells = <2>;
        };

        slt: slt {
            compatible = "zmk,behavior-hold-tap";
            label = "slow layer-tap";
            #binding-cells = <2>;
            tapping-term-ms = <750>;
            quick-tap-ms = <750>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        qlt: qlt {
            compatible = "zmk,behavior-hold-tap";
            label = "quick layer-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };
    };


    // -------- COMBOS ---------

    #define COMBO(name, keypress, keypos) \
    combo_##name {\
        timeout-ms = <30>;\
        bindings = <keypress>;\
        key-positions = <keypos>;\
    }
    /*  key pos 
    ---------------------------------------------------------
                    LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3        
            LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5
                LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4    
                            LH1 LH0 | RH0 RH1               
    --------------------------------------------------------- */

    combos {
        compatible = "zmk,combos";
        COMBO(tab              ,&kp TAB       ,LT3 LT2);
        COMBO(bspc             ,&bspc_del     ,RT2 RT3);
        COMBO(enter            ,&kp ENTER     ,RM2 RM3);
        COMBO(esc              ,&kp ESC       ,LH0 LH1);
        COMBO(esc2             ,&kp ESC       ,RH0 RH1);
        COMBO(caps             ,&caps_word    ,LH0 RH0);
        //vertical combos
        COMBO(lbkt             ,&kp LBKT      ,LT3 LM3);
        COMBO(lbrc             ,&kp LBRC      ,LT2 LM2);
        COMBO(lpar             ,&kp LPAR      ,LT1 LM1);
        COMBO(rpar             ,&rpar_lpar    ,RT1 RM1);
        COMBO(rbrc             ,&rbrc_lbrc    ,RT2 RM2);
        COMBO(rbkt             ,&kp RBKT      ,RT3 RM3);
        COMBO(equal            ,&kp EQUAL     ,LT0 LM0);
        COMBO(under            ,&kp UNDER     ,RT0 RM0);
    };


    // -------- LAYERS ---------

    #define _____  &trans
    #define TRANS_LAYER(layer_name) \
        layer_name {\
            bindings = <\
                          _____  _____  _____  _____  _____  _____  _____\
            _____  _____  _____  _____  _____  _____  _____  _____  _____  _____  _____  _____\
                   _____  _____  _____  _____  _____  _____  _____  _____  _____  _____\
                                        _____  _____  _____  _____\
            >;\
        }

    #define HRML(k1,k2,k3,k4) &lht LSHFT k1  &hrm LGUI k2   &hrm LCTRL k3  &hrm LALT k4
    #define HRMR(k1,k2,k3,k4) &rht RALT k1   &hrm RCTRL k2  &hrm RGUI k3   &hrm RSHFT k4

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                               &kp W      &kp E       &kp R      &kp T             &kp Y       &kp U     &kp I       &kp O
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
       &kp Q      HRML(A,        S,         D,         F)        &kp G             &kp H      HRMR(J,      K,          L,        SQT)         &kp P
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                 &kp Z         &kp X      &kp C       &kp V      &kp B             &kp N       &kp M   &comm_scln  &dot_coln    &kp SLASH
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                   &qlt 1 ESC  &skq LSHFT      &lt 4 SPACE &qlt 1 ENTER

            >;
        };

        SYM {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            &kp TILDE   &kp ASTRK  &kp AMPS     &kp EQUAL        &kp PLUS    &kp N7       &kp N8     &kp N9
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
     _____      &kp GRAVE   &kp CARET  &kp PERCENT  &kp DOLLAR  &kp UNDER       &kp MINUS    &kp N4       &kp N5     &kp N6      &kp SQT    &kp PIPE
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                   _____     &kp HASH    &kp AT      &kp EXCL     &kp LT         &kp GT      &kp N1       &kp N2     &kp N3     &kp BSLH
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                      _____        _____          _____       &kp N0
            >;
        };
        
        TRANS_LAYER(_MAC);
        TRANS_LAYER(_WIN);

        NAV {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                           &kp C_VOL_DN &kp C_VOL_UP    _____ &kp LG(GRAVE)       &kp F2    &kp PG_DN   &kp PG_UP    &none
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
      &none    &kp LSHIFT  &kp LGUI     &kp LCTRL  &kp LALT    &kp LG(TAB)       &kp LEFT   &kp DOWN     &kp UP     &kp RIGHT     _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                   &none       &none       &none      &none    &kp LA(TAB)       &kp F12      _____       _____       _____       _____
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____      _____           &tog 4     &to 4
            >;
        };

        MAC_SHORTCUT {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                               _____     _____        _____       _____            _____       _____      _____  &kp LA(LG(ESC))
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
     &kp LG(Q)     _____      _____      _____        _____       _____            _____       _____      _____       _____       _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)     _____            _____       _____      _____       _____       _____
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____   &kp LG(SPACE)       _____       _____
            >;
        };
                
        WIN_SHORTCUT {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                               _____     _____        _____       _____            _____       _____      _____    &kp LC(LA(DEL))
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
    &kp LA(F4)     _____      _____       _____       _____       _____            _____       _____      _____       _____       _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)     _____            _____       _____      _____       _____       _____
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____    &kp LGUI           _____       _____
            >;
        };

#define BT(num) &bt BT_SEL num
        FN {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                              &to 3       &to 2      &reset     &bootloader    &bootloader    &reset      &none       &none
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
   &bt BT_CLR     BT(4)       BT(3)       BT(2)       BT(1)        BT(0)         &none      &bt BT_NXT   &bt BT_PRV  &none        &none       &none     
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                  &none       &none       &none       &none        &none         &none        &none       &none       &none       &none     
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                      &none        &none         &none        &none
            >;
        };
    };


    // -------- CONDITIONAL_LAYERS ---------

    #define TRI_LAYER(name, ifs, thens) \
        tri_layer_##name {\
            if-layers = <ifs>;\
            then-layer = <thens>;\
        }

    conditional_layers {
        compatible = "zmk,conditional-layers";
        TRI_LAYER(mac_shortcuts, NAV _MAC, MAC_SHORTCUT);
        TRI_LAYER(win_shortcuts, NAV _WIN, WIN_SHORTCUT);
    };


};
