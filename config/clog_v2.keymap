#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN 0
#define SYM 1
#define NAV 2
#define MAC_SHORTCUT 3
#define WIN_SHORTCUT 4
#define MAC 5
#define WIN 6
#define FN 7

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        mac_shortcuts {
            if-layers = <NAV MAC>;
            then-layer = <MAC_SHORTCUT>;
        };

        win_shortcuts {
            if-layers = <NAV WIN>;
            then-layer = <WIN_SHORTCUT>;
        };

    };
};

/ {
    behaviors {
        rprn: rprn {
            compatible = "zmk,behavior-mod-morph";
            label = "reversible_parenthesis";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp LEFT_PARENTHESIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rcbr: rcbr {
            compatible = "zmk,behavior-mod-morph";
            label = "reversible_brace";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_BRACE>,
                <&kp LEFT_BRACE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings =
                <&kp DOT>,
                <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comm_scln: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_pipe: comma_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PIPE";
            #binding-cells = <0>;
            bindings =
                <&kp COMMA>,
                <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <750>;
            quick-release;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        sft_t: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "shift_tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
        fn: function_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "fn_layer";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick-tap-ms = <500>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
        qlt: quick_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "quick_layer_tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bspc {
            timeout-ms = <20>;
            key-positions = <6 7>;
            bindings = <&kp BSPC>;
            layers = <0 1>;
        };

        combo_esc {
            timeout-ms = <20>;
            key-positions = <32 33>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        combo_tab {
            timeout-ms = <20>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
            layers = <0>;
        };

        combo_lbrc {
            timeout-ms = <20>;
            key-positions = <0 10>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <0 1>;
        };

        combo_lcbr {
            timeout-ms = <20>;
            key-positions = <1 11>;
            bindings = <&kp LEFT_BRACE>;
            layers = <0 1>;
        };

        combo_lprn {
            timeout-ms = <20>;
            key-positions = <2 12>;
            bindings = <&kp LEFT_PARENTHESIS>;
            layers = <0 1>;
        };

        combo_rprn {
            timeout-ms = <20>;
            key-positions = <5 15>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            layers = <0 1>;
        };

        combo_rcbr {
            timeout-ms = <20>;
            key-positions = <6 16>;
            bindings = <&rcbr>;
            layers = <0 1>;
        };

        combo_rbrc {
            timeout-ms = <20>;
            key-positions = <7 17>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <0 1>;
        };

        combo_semicolon {
            timeout-ms = <20>;
            key-positions = <16 27>;
            bindings = <&kp SEMICOLON>;
            layers = <0 1>;
        };

        combo_colon {
            timeout-ms = <20>;
            key-positions = <17 28>;
            bindings = <&kp COLON>;
            layers = <0 1>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp EQUAL>;
            layers = <0 1>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <4 14>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        combo_less {
            bindings = <&kp LESS_THAN>;
            key-positions = <24 13>;
            layers = <0 1>;
        };

        combo_greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <14 25>;
            layers = <0 1>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <31 32>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                       &fn FN W        &kp E           &kp R            &kp T        &kp Y       &kp U        &kp I     &fn FN O
&kp Q  &sft_t LSHFT A  &hm LGUI S  &hm LCTRL D  &hm LEFT_ALT F            &kp G        &kp H  &hm RALT J  &hm RCTRL K  &hm RGUI L  &sft_t RSHFT SQT  &kp P
             &kp Z       &kp X        &kp C           &kp V            &kp B        &kp N       &kp M    &comm_scln     &dot_colon      &kp SLASH
                                                 &qlt SYM ESC  &skq LEFT_SHIFT  &lt NAV SPACE   &qlt SYM ENTER
            >;
        };

        SYM_layer {
            bindings = <
                   &kp TILDE    &kp ASTRK  &kp AMPERSAND       &kp EQUAL          &kp PLUS  &kp N7  &kp N8  &kp N9
&trans  &kp GRAVE  &kp CARET  &kp PERCENT     &kp DOLLAR  &kp UNDERSCORE         &kp MINUS  &kp N4  &kp N5  &kp N6   &kp SQT  &kp PIPE
           &trans   &kp HASH       &kp AT       &kp EXCL   &kp LESS_THAN  &kp GREATER_THAN  &kp N1  &kp N2  &kp N3  &kp BSLH
                                                  &trans          &trans            &trans  &kp N0
            >;
        };

        NAV_layer {
            bindings = <
                        &kp C_VOL_DN  &kp C_VOL_UP        &trans  &kp LG(GRAVE)    &kp F2  &kp PG_DN  &kp PG_UP     &kp F4
&trans  &kp LEFT_SHIFT  &kp LEFT_GUI     &kp LCTRL  &kp LEFT_ALT    &kp LG(TAB)  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans  &trans
                &trans        &trans        &trans        &trans    &kp LA(TAB)   &kp F12     &trans     &trans     &trans  &trans
                                                           &none         &trans     &to 0      &to 2
            >;
        };

        FN_layer {
            bindings = <
                     &none         &none        &reset  &bootloader  &bootloader        &reset         &none         &none
&none  &none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bt BT_CLR   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none
       &none         &none  &bt BT_SEL 4  &bt BT_SEL 3        &none        &none  &bt BT_SEL 3  &bt BT_SEL 4         &none  &none
                                                 &none        &none       &trans         &none
            >;
        };
    };
};
