#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../keypos_def/keypos_clog_v2.h"

// SETTINGS 
#define QUICK_TAP_MS 300 
#define STICKY_TIME_MS 1000 

// LAYERS
#define BASE 0
#define SYM 1
#define _MAC 2
#define _WIN 3
#define NAV 4
#define MAC_SHORTCUT 5
#define WIN_SHORTCUT 6
#define FN 7


#define TRI_LAYER(name, ifs, thens) \
    tri_layer_##name {\
        if-layers = <ifs>;\
        then-layer = <thens>;\
    }

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        TRI_LAYER(mac_shortcuts, NAV _MAC, MAC_SHORTCUT);
        TRI_LAYER(win_shortcuts, NAV _WIN, WIN_SHORTCUT);
    };
};


#define SHIFT_MORPH(name, bind1, bind2) \
    name: name {\
        compatible = "zmk,behavior-mod-morph";\
        label = #name;\
        #binding-cells = <0>;\
        bindings = <&kp bind1>, <&kp bind2>;\
        mods = <(MOD_LSFT|MOD_RSFT)>;\
    }

/ {
    behaviors {
        SHIFT_MORPH(bspc_del,   BSPC,               DEL);
        SHIFT_MORPH(rpar_lpar,  RIGHT_PARENTHESIS,  LEFT_PARENTHESIS);
        SHIFT_MORPH(rbrc_lbrc,  RIGHT_BRACE,        LEFT_BRACE);
        SHIFT_MORPH(dot_coln,   DOT,                COLON);
        SHIFT_MORPH(comm_scln,  COMMA,              SEMICOLON);

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <STICKY_TIME_MS>;
            quick-release;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row mods";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
        };

        lht: lht {
            compatible = "zmk,behavior-hold-tap";
            label = "left hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RH KEYS_THUMB>;
            #binding-cells = <2>;
        };

        rht: rht {
            compatible = "zmk,behavior-hold-tap";
            label = "right hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LH KEYS_THUMB>;
            #binding-cells = <2>;
        };

        slt: slt {
            compatible = "zmk,behavior-hold-tap";
            label = "slow layer-tap";
            #binding-cells = <2>;
            tapping-term-ms = <750>;
            quick-tap-ms = <750>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        qlt: qlt {
            compatible = "zmk,behavior-hold-tap";
            label = "quick layer-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };
    };
};

/*  key pos 
---------------------------------------------------------
                LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3        
        LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5
            LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4    
                        LH1 LH0 | RH0 RH1               
--------------------------------------------------------- */

#define COMBO(name, keypress, keypos) \
combo_##name {\
	timeout-ms = <30>;\
	bindings = <keypress>;\
	key-positions = <keypos>;\
}

#define COMBO_ON_LAYER(name, keypress, keypos, layer_array) \
combo_##name {\
	timeout-ms = <30>;\
	bindings = <keypress>;\
	key-positions = <keypos>;\
	layers = <layer_array>;\
}

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(tab              ,&kp TAB       ,LT3 LT2);
        COMBO_ON_LAYER(bspc    ,&bspc_del     ,RT2 RT3,  0 1 2 3);
        COMBO_ON_LAYER(del     ,&kp DEL       ,RR2 RT3,  4 5 6);
        COMBO(enter            ,&kp ENTER     ,RM2 RM3);
        COMBO(esc              ,&kp ESC       ,LH0 LH1);
        COMBO(esc2             ,&kp ESC       ,RH0 RH1);
        COMBO(caps             ,&caps_word    ,LH0 RH0);
        //vertical combos
        COMBO(lbkt             ,&kp LBKT      ,LT3 LM3);
        COMBO(lbrc             ,&kp LBRC      ,LT2 LM2);
        COMBO(lpar             ,&kp LPAR      ,LT1 LM1);
        COMBO(rpar             ,&rpar_lpar    ,RT1 RM1);
        COMBO(rbrc             ,&rbrc_lbrc    ,RT2 RM2);
        COMBO(rbkt             ,&kp RBKT      ,RT3 RM3);
        COMBO(equal            ,&kp EQUAL     ,LT0 LM0);
        COMBO(under            ,&kp UNDER     ,RT0 RM0);
    };
};

#define TRANS_LAYER(layer_name) \
    layer_name {
        bindings = <\
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans\
        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans\
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans\
                                &trans  &trans  &trans  &trans\
        >;\
    }

#define HRML(k1,k2,k3,k4) &lht LSHFT k1  &hrm LGUI k2   &hrm LCTRL k3  &hrm LALT k4
#define HRMR(k1,k2,k3,k4) &rht RALT k1   &hrm RCTRL k2  &hrm RGUI k3   &hrm RSHFT k4

/ {
    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
                          &slt 7 W       &kp E           &kp R            &kp T        &kp Y         &kp U        &kp I     &slt 7 O
         &kp Q  HRML(A,         S,           D,              F)           &kp G        &kp H        HRMR(J,           K,         L,           SQT)   &kp P
                &kp Z       &kp X        &kp C           &kp V            &kp B        &kp N         &kp M    &comm_scln    &dot_coln    &kp SLASH
                                                    &qlt 1 ESC  &skq LEFT_SHIFT  &lt 4 SPACE  &qlt 1 ENTER
            >;
        };

        SYM {
            bindings = <
                   &kp TILDE    &kp ASTRK  &kp AMPERSAND       &kp EQUAL          &kp PLUS  &kp N7  &kp N8  &kp N9
&trans  &kp GRAVE  &kp CARET  &kp PERCENT     &kp DOLLAR  &kp UNDERSCORE         &kp MINUS  &kp N4  &kp N5  &kp N6   &kp SQT  &kp PIPE
           &trans   &kp HASH       &kp AT       &kp EXCL   &kp LESS_THAN  &kp GREATER_THAN  &kp N1  &kp N2  &kp N3  &kp BSLH
                                                  &trans          &trans            &trans  &kp N0
            >;
        };
        
        TRANS_LAYER(_MAC);
        TRANS_LAYER(_WIN);

        NAV {
            bindings = <
                       &kp C_VOL_DN  &kp C_VOL_UP        &trans  &kp LG(GRAVE)    &kp F2  &kp PG_DN  &kp PG_UP      &none
&none  &kp LEFT_SHIFT  &kp LEFT_GUI     &kp LCTRL  &kp LEFT_ALT    &kp LG(TAB)  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans  &trans
                &none         &none         &none         &none    &kp LA(TAB)   &kp F12     &trans     &trans     &trans  &trans
                                                         &trans         &trans    &tog 4     &tog 4
            >;
        };

        MAC_SHORTCUT {
            bindings = <
                         &trans     &trans     &trans         &trans  &trans  &trans  &trans  &kp LA(LG(ESC))
&kp LG(Q)     &trans     &trans     &trans     &trans         &trans  &trans  &trans  &trans           &trans  &trans  &trans
           &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)         &trans  &trans  &trans  &trans           &trans  &trans
                                               &trans  &kp LG(SPACE)  &trans  &trans
            >;
        };

        WIN_SHORTCUT {
            bindings = <
                          &trans     &trans     &trans        &trans  &trans  &trans  &trans  &kp LC(LA(DEL))
&kp LA(F4)     &trans     &trans     &trans     &trans        &trans  &trans  &trans  &trans           &trans  &trans  &trans
            &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)        &trans  &trans  &trans  &trans           &trans  &trans
                                                &trans  &kp LEFT_GUI  &trans  &trans
            >;
        };

        FN {
            bindings = <
                     &to 3         &to 2        &reset  &bootloader  &bootloader        &reset         &none         &none
&none  &none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bt BT_CLR   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none
       &none         &none  &bt BT_SEL 4  &bt BT_SEL 3        &none        &none  &bt BT_SEL 3  &bt BT_SEL 4         &none  &none
                                                 &none        &none       &trans         &none
            >;
        };
    };
};
