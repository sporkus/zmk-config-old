#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../helpers/keypos_clog_v2.h"
#include "../helpers/keymap_helpers.h"

// SETTINGS 
#define TAPPING_TERM 300 
#define TAP_DANCE_FAST 200 
#define TAP_DANCE_SLOW 350 
#define QUICK_TAP_MS 500 
#define LAYTAP_SLOW_TERM 1000 
#define STICKY_TIME 1000 
#define COMBO_QUICK_MS 40  
#define COMBO_SLOW_MS  70 

// LAYERS
#define  BASE 0
#define  SYM  1
#define  _MAC 2
#define  _WIN 3 
#define  NAV  4 
#define  MAC  5 
#define  WIN  6 
#define  ADJ   7

&lt {
	flavor = "tap-preferred";
	quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    // -------- BEHAVIORS ---------------------------------------------------------------
    behaviors {
    // MOD-MORPHS: binding1, binding2
    SHIFT_MORPH(bspc_morph,  &kp BSPC,               &kp DEL);
    SHIFT_MORPH(rpar_morph,  &kp RIGHT_PARENTHESIS,  &kp LEFT_PARENTHESIS);
    SHIFT_MORPH(rbrc_morph,  &kp RIGHT_BRACE,        &kp LEFT_BRACE);
    SHIFT_MORPH(dot_morph,   &kp DOT,                &kp COLON);
    SHIFT_MORPH(comm_morph,  &kp COMMA,              &kp SEMICOLON);
    SHIFT_MORPH(spc_morph,   &kp SPACE,              &period_spc);

    // STICKY KEYS: binding, timeout
    STICKY(skp, &kp, STICKY_TIME);
    STICKY(smo, &mo, STICKY_TIME);

    // KEYPRESS SEQUENCES: bindings...
    MACRO(win_sleep,      &macro_wait_time 100 &kp LG(X) &kp U &kp S);
    MACRO(less_eql,       &kp LESS_THAN    &kp EQUAL);
    MACRO(greater_eql,    &kp GREATER_THAN &kp EQUAL);
    MACRO(not_eql,        &kp EXCL         &kp EQUAL);
    MACRO(period_spc,     &kp DOT   &kp SPACE  &skp LSHFT);
    MACRO(win_delword,    &kp LC(RIGHT) &kp LS(LC(LEFT)) &kp BSPC);
    MACRO(mac_delword,    &kp LA(RIGHT) &kp LS(LA(LEFT)) &kp BSPC);


    // TAP DANCES: tapping_term, bindings...
    DOUBLE_TAP(lt_lte,    TAP_DANCE_FAST,   &kp LT,         &less_eql);
    DOUBLE_TAP(gt_gte,    TAP_DANCE_FAST,   &kp GT,         &greater_eql);
    DOUBLE_TAP(eql_neql,  TAP_DANCE_FAST,   &kp EQUAL,      &not_eql);
    DOUBLE_TAP(win_copy,  TAP_DANCE_SLOW,   &kp LC(INSERT), &kp LS(INSERT));
    DOUBLE_TAP(mac_copy,  TAP_DANCE_SLOW,   &kp LG(C),      &kp LG(V));
    TRIPLE_TAP(sft_caps,  TAP_DANCE_SLOW,   &skp LSHFT,     &caps_word,   &kp K_CANCEL);  //thumbs are slow

    // HOLD TAPS: binding1, binding2, tapping_term, quick_tap_time, global_quick_tap 
    HOLDTAP_TAP_PREFFERED(hrm,          &kp, &kp,        TAPPING_TERM,     QUICK_TAP_MS,      GLOBAL_QT);
    HOLDTAP_TAP_PREFFERED(qlt,          &mo, &kp,        TAPPING_TERM,     QUICK_TAP_MS,      GLOBAL_QT);
    HOLDTAP_TAP_PREFFERED(spc_lt,       &mo, &spc_morph, TAPPING_TERM,     QUICK_TAP_MS,      NO_GLOBAL_QT);

    // POSITIONHAL HOLD TAPS: binding1, binding2, tapping_term, quick_tap_time, global_quick_tap, hold_triggers 
    MODTAP_TAP_BALANCED_POS(lht, &kp, &kp,  TAPPING_TERM,  QUICK_TAP_MS,  GLOBAL_QT,  KEYS_RH_THUMB);
    MODTAP_TAP_BALANCED_POS(rht, &kp, &kp,  TAPPING_TERM,  QUICK_TAP_MS,  GLOBAL_QT,  KEYS_LH_THUMB);
    };


    // -------- COMBOS ---------------------------------------------------------------
    combos {
    compatible = "zmk,combos";

    /*  key pos 
    ---------------------------------------------------------
                    LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3        
            LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5
                LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4    
                            LH1 LH0 | RH0 RH1               
    --------------------------------------------------------- */
    // horizontal combos
    COMBO(tab         ,&kp TAB          ,LT3 LT2,   COMBO_QUICK_MS,  COMBO_ALL);
    COMBO(esc0        ,&kp ESC          ,LM1 LM2,   COMBO_QUICK_MS,  COMBO_ALL);
//  COMBO(win_copy    ,&lht LC(V) LC(C) ,LB1 LB2,   COMBO_QUICK_MS,  _WIN);
//  COMBO(mac_copy    ,&lht LG(V) LG(C) ,LB1 LB2,   COMBO_QUICK_MS,  _MAC);
    COMBO(win_copy    ,&win_copy        ,LB1 LB2,   COMBO_QUICK_MS,  _WIN);
    COMBO(win_delword ,&win_delword     ,RT1 RT3,   COMBO_QUICK_MS,  _WIN);
    COMBO(mac_copy    ,&mac_copy        ,LB1 LB2,   COMBO_QUICK_MS,  _MAC);
    COMBO(mac_delword ,&mac_delword     ,RT1 RT3,   COMBO_QUICK_MS,  _MAC);
    COMBO(bspc        ,&bspc_morph      ,RT2 RT3,   COMBO_QUICK_MS,  COMBO_ALL);
    COMBO(enter       ,&kp ENTER        ,RM1 RM2,   COMBO_QUICK_MS,  COMBO_ALL);
     
    // vertical combos
    COMBO(lbkt        ,&kp LBKT         ,LT3 LM3,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(lbrc        ,&kp LBRC         ,LT2 LM2,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(lpar        ,&kp LPAR         ,LT1 LM1,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(rpar        ,&rpar_morph      ,RT1 RM1,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(rbrc        ,&rbrc_morph      ,RT2 RM2,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(rbkt        ,&kp RBKT         ,RT3 RM3,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(equal       ,&eql_neql        ,LT0 LM0,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(under       ,&kp UNDER        ,RT0 RM0,   COMBO_SLOW_MS,   COMBO_ALL);

    // thumb combos
    COMBO(esc         ,&kp ESC          ,LH0 LH1,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(esc2        ,&kp ESC          ,RH0 RH1,   COMBO_SLOW_MS,   COMBO_ALL);
    COMBO(tog_adj     ,&tog ADJ         ,LH1 LH0 RH0 RH1,   COMBO_SLOW_MS,   COMBO_ALL);
    };



    // -------- LAYERS ---------------------------------------------------------------
    #define _____  &trans
    #define TRANS_LAYER(layer_name) \
        layer_name {\
            bindings = <\
                          _____  _____  _____  _____  _____  _____  _____\
            _____  _____  _____  _____  _____  _____  _____  _____  _____  _____  _____  _____\
                   _____  _____  _____  _____  _____  _____  _____  _____  _____  _____\
                                        _____  _____  _____  _____\
            >;\
        }

    #define HRML(k1,k2,k3,k4) &hrm LALT  k1   &hrm LGUI k2  &lht LSHFT k3  &hrm LCTRL k4
    #define HRMR(k1,k2,k3,k4) &hrm RCTRL k1  &rht RSHFT k2  &hrm RGUI k3   &hrm RALT k4
    #define LP_CTRL(letter) &hrm LC(letter) letter 

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            LP_CTRL(W)    &kp E     LP_CTRL(R)      &kp T           &kp Y       &kp U       &kp I        &kp O
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
    &qlt NAV Q      HRML(A,        S,         D,         F)        &kp G          &kp H      HRMR(J,      K,          L,        SQT)         &kp P
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                 &kp Z         &kp X      &kp C     LP_CTRL(V)    &kp B           &kp N       &kp M     &comm_morph  &dot_morph    &kp SLASH
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                      &smo 1    &sft_caps      &spc_lt NAV 0  &smo 1 

            >;
        };

        SYM {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            &kp TILDE   &kp ASTRK   &kp AMPS    &eql_neql       &kp PLUS     &kp N7       &kp N8     &kp N9
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
     _____      &kp GRAVE   &kp CARET  &kp PERCENT  &kp DOLLAR  &kp UNDER       &kp MINUS    &kp N4       &kp N5     &kp N6      &kp SQT    &kp PIPE
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                   _____     &kp HASH    &kp AT      &kp EXCL    &lt_lte         &gt_gte     &kp N1       &kp N2     &kp N3     &kp BSLH
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                      _____        _____          _____       &kp N0
            >;
        };
        
        TRANS_LAYER(_MAC);
        TRANS_LAYER(_WIN);

        NAV {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                              _____        _____      _____   &kp LG(GRAVE)      _____      &kp PG_DN   &kp PG_UP    _____ 
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
      &none    &skp LALT    &skp LGUI   &skp LSHFT  &skp LCTRL &kp LG(TAB)       &kp LEFT   &kp DOWN     &kp UP     &kp RIGHT     _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                   &none       &none       &none      &none    &kp LA(TAB)       _____      _____       _____       _____       _____
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____      _____           &tog 4     &to 4
            >;
        };

        MAC {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            &kp LG(W)     _____        _____       _____            _____       _____      _____       _____ 
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
     &kp LG(Q)     _____      _____      _____        _____       _____            _____       _____      _____       _____       _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)     _____            _____       _____      _____       _____    &kp LG(LA(S)) 
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____   &kp LG(SPACE)       _____       _____
            >;
        };
                
        WIN {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            &kp LC(W)   &kp LG(E)     _____       _____            _____       _____      _____      _____ 
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
    &kp LA(F4)     _____      _____       _____       _____       _____            _____       _____      _____       _____       _____      _____
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)     _____            _____       _____      _____       _____    &win_sleep
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                       _____    &kp LGUI           _____       _____
            >;
        };

#define BT(num) &bt BT_SEL num
        ADJ {
            bindings = <
//                        ╭───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────╮
                            &to  _MAC   &to _WIN     &reset    &bootloader     &bootloader    &reset      &none       &none
//╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
       &none      BT(4)       BT(3)       BT(2)       BT(1)        BT(0)         &none      &bt BT_NXT   &bt BT_PRV  &none        &none       &none     
//            ╭───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────╮
                  &none       &none       &none       &none        &none         &none        &none       &none       &none       &none     
//                                                ╭───────────┬───────────╮   ╭───────────┬───────────╮
                                                      &none        &none         &none        &none
            >;
        };
    };


    conditional_layers {
        compatible = "zmk,conditional-layers";
        TRI_LAYER(mac_shortcuts, NAV _MAC, MAC);
        TRI_LAYER(win_shortcuts, NAV _WIN, WIN);
    };
};
